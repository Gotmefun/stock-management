#!/usr/bin/env python3
"""
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô Supabase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å
Create sample products in Supabase for testing stock counting
"""

import os
from supabase import create_client
from datetime import datetime

# Supabase configuration
SUPABASE_URL = os.environ.get('SUPABASE_URL')
SUPABASE_ANON_KEY = os.environ.get('SUPABASE_ANON_KEY')

def create_supabase_client():
    """Create Supabase client"""
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SUPABASE_URL ‡πÅ‡∏•‡∏∞ SUPABASE_ANON_KEY ‡πÉ‡∏ô environment variables")
        print("Please set SUPABASE_URL and SUPABASE_ANON_KEY environment variables")
        return None
    
    try:
        return create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase: {e}")
        print(f"Cannot connect to Supabase: {e}")
        return None

def create_sample_products(supabase):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô Supabase"""
    print("üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...")
    
    # ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    sample_products = [
        {
            'sku': 'TEST001',
            'barcode': '1234567890123',
            'name': '‡∏ô‡∏°‡∏™‡∏î ‡πÄ‡∏°‡∏à‡∏¥ 1000 ‡∏°‡∏•.',
            'description': '‡∏ô‡∏°‡∏™‡∏î‡∏û‡∏≤‡∏™‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÑ‡∏£‡∏™‡πå ‡πÄ‡∏°‡∏à‡∏¥ 1000 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£',
            'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
            'brand': '‡πÄ‡∏°‡∏à‡∏¥',
            'unit': '‡∏Å‡∏•‡πà‡∏≠‡∏á',
            'cost_price': 45.00,
            'selling_price': 59.00,
            'reorder_level': 20,
            'max_stock_level': 100,
            'is_active': True
        },
        {
            'sku': 'TEST002', 
            'barcode': '8851019991234',
            'name': '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏≠‡πä‡∏ï ‡πÄ‡∏Ñ‡∏ß‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå 500 ‡∏Å‡∏£‡∏±‡∏°',
            'description': '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏≠‡πä‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤',
            'category': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏´‡πâ‡∏á',
            'brand': '‡πÄ‡∏Ñ‡∏ß‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå',
            'unit': '‡∏Å‡∏•‡πà‡∏≠‡∏á',
            'cost_price': 120.00,
            'selling_price': 149.00,
            'reorder_level': 10,
            'max_stock_level': 50,
            'is_active': True
        },
        {
            'sku': 'TEST003',
            'barcode': '8850999999999',
            'name': '‡∏ô‡πâ‡∏≥‡πÅ‡∏£‡πà ‡∏™‡∏¥‡∏á‡∏´‡πå 600 ‡∏°‡∏•.',
            'description': '‡∏ô‡πâ‡∏≥‡πÅ‡∏£‡πà‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏™‡∏¥‡∏á‡∏´‡πå 600 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£',
            'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
            'brand': '‡∏™‡∏¥‡∏á‡∏´‡πå',
            'unit': '‡∏Ç‡∏ß‡∏î',
            'cost_price': 8.00,
            'selling_price': 12.00,
            'reorder_level': 50,
            'max_stock_level': 200,
            'is_active': True
        },
        {
            'sku': 'TEST004',
            'barcode': '1111111111111',
            'name': '‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡πÇ‡∏≠‡∏≠‡∏¥‡∏ä‡∏¥ 500 ‡∏°‡∏•.',
            'description': '‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∑‡πà‡∏° ‡πÇ‡∏≠‡∏≠‡∏¥‡∏ä‡∏¥ 500 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£',
            'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
            'brand': '‡πÇ‡∏≠‡∏≠‡∏¥‡∏ä‡∏¥',
            'unit': '‡∏Ç‡∏ß‡∏î',
            'cost_price': 15.00,
            'selling_price': 20.00,
            'reorder_level': 30,
            'max_stock_level': 120,
            'is_active': True
        },
        {
            'sku': 'TEST005',
            'barcode': '2222222222222',
            'name': '‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡∏Å‡∏∂‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏°‡∏≤‡∏°‡πà‡∏≤',
            'description': '‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡∏Å‡∏∂‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ ‡∏£‡∏™‡∏´‡∏°‡∏π‡∏ï‡πâ‡∏°',
            'category': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏∂‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ',
            'brand': '‡∏°‡∏≤‡∏°‡πà‡∏≤',
            'unit': '‡∏ã‡∏≠‡∏á',
            'cost_price': 6.00,
            'selling_price': 9.00,
            'reorder_level': 100,
            'max_stock_level': 500,
            'is_active': True
        }
    ]
    
    try:
        # ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        print("üßπ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏î‡∏¥‡∏°...")
        supabase.table('products').delete().in_('sku', ['TEST001', 'TEST002', 'TEST003', 'TEST004', 'TEST005']).execute()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        result = supabase.table('products').insert(sample_products).execute()
        
        if result.data:
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á {len(result.data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print("\nüìã ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
            for product in result.data:
                print(f"   üè∑Ô∏è {product['barcode']} - {product['name']}")
            
            print(f"\nüéØ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ:")
            for product in sample_products:
                print(f"   üì± {product['barcode']} ({product['name']})")
                
            return True
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ")
            return False
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def setup_branches(supabase):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏ô Supabase"""
    print("üè™ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤...")
    
    branches = [
        {'code': 'MAIN', 'name': '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å', 'is_active': True},
        {'code': 'CITY', 'name': '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á', 'is_active': True},
        {'code': 'PONGPAI', 'name': '‡∏™‡∏≤‡∏Ç‡∏≤‡πÇ‡∏õ‡πà‡∏á‡πÑ‡∏ú‡πà', 'is_active': True},
        {'code': 'SCHOOL', 'name': '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', 'is_active': True}
    ]
    
    try:
        # ‡∏•‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        supabase.table('branches').delete().in_('code', ['MAIN', 'CITY', 'PONGPAI', 'SCHOOL']).execute()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏´‡∏°‡πà
        result = supabase.table('branches').insert(branches).execute()
        
        if result.data:
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ {len(result.data)} ‡∏™‡∏≤‡∏Ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            for branch in result.data:
                print(f"   üè™ {branch['name']} ({branch['code']})")
            return True
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ")
            return False
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")
    print("Setting up sample data for testing...")
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase
    supabase = create_supabase_client()
    if not supabase:
        return False
    
    print(f"üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Supabase: {SUPABASE_URL}")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤
    if not setup_branches(supabase):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ")
        return False
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    if not create_sample_products(supabase):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")
        return False
    
    print("\nüéâ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("Setup completed!")
    print("\nüì± ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏±‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß:")
    print("You can now test stock counting with these barcodes:")
    print("   ‚Ä¢ 1234567890123 (‡∏ô‡∏°‡∏™‡∏î ‡πÄ‡∏°‡∏à‡∏¥)")
    print("   ‚Ä¢ 8851019991234 (‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏≠‡πä‡∏ï ‡πÄ‡∏Ñ‡∏ß‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå)")
    print("   ‚Ä¢ 8850999999999 (‡∏ô‡πâ‡∏≥‡πÅ‡∏£‡πà ‡∏™‡∏¥‡∏á‡∏´‡πå)")
    print("   ‚Ä¢ 1111111111111 (‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡πÇ‡∏≠‡∏≠‡∏¥‡∏ä‡∏¥)")
    print("   ‚Ä¢ 2222222222222 (‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà ‡∏°‡∏≤‡∏°‡πà‡∏≤)")
    
    return True

if __name__ == "__main__":
    main()