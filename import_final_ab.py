#!/usr/bin/env python3
"""
р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Ир╕▓р╕Б Google Sheets р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕лр╕бр╣И (р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в)
Column A = Barcode (р╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Ф)
Column B = Product Name (р╕Кр╕╖р╣Ир╕нр╕кр╕┤р╕Щр╕Др╣Йр╕▓)
"""

import os
from supabase import create_client
from sheets_manager import create_sheets_manager

# Configuration
SUPABASE_URL = "https://khiooiigrfrluvyobljq.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoaW9vaWlncmZybHV2eW9ibGpxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxMjAxNDYsImV4cCI6MjA2ODY5NjE0Nn0.M9mwVk8WnEQfb2l7-NOdnrmJqSThYf2TqJK1ahnsx-Q"
PRODUCT_SHEET_ID = "17fQBTqiUG6tFH-67its-iaKDV2ef4HLJ9S3BGKTVSdM"

def get_products_from_sheets():
    """р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Google Sheets Column A (Barcode), B (Product Name)"""
    print("ЁЯУК р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Google Sheets...")
    
    sheets_manager = create_sheets_manager()
    if not sheets_manager:
        print("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н Google Sheets р╣Др╕Фр╣Й")
        return []
    
    try:
        # р╕нр╣Ир╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Column A (Barcode), B (Product Name)
        result = sheets_manager.sheets_service.spreadsheets().values().get(
            spreadsheetId=PRODUCT_SHEET_ID,
            range='A:B'
        ).execute()
        
        values = result.get('values', [])
        
        if not values:
            print("тЭМ р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ Google Sheets")
            return []
        
        print(f"ЁЯУЛ р╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е {len(values)} р╣Бр╕Цр╕зр╣Гр╕Щ Google Sheets")
        
        products = []
        skipped = 0
        
        for i, row in enumerate(values):
            if i == 0:  # Skip header row
                continue
            
            # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ column A р╣Бр╕ер╕░ B
            if len(row) >= 2:
                barcode = str(row[0]).strip() if row[0] else ''
                name = str(row[1]).strip() if row[1] else ''
                
                # р╣Ар╕Бр╣Зр╕Ър╣Ар╕Йр╕Юр╕▓р╕░р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕╡р╣Ир╕бр╕╡р╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Фр╣Бр╕ер╕░р╕Кр╕╖р╣Ир╕нр╕кр╕┤р╕Щр╕Др╣Йр╕▓ р╣Бр╕ер╕░р╣Др╕бр╣Ир╣Гр╕Кр╣И header
                if barcode and name and barcode.lower() not in ['barcode', 'р╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Ф']:
                    # р╕Хр╕▒р╕Фр╕Кр╕╖р╣Ир╕нр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╣Др╕бр╣Ир╣Ар╕Бр╕┤р╕Щ 500 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г
                    if len(name) > 500:
                        name = name[:497] + "..."
                    
                    products.append({
                        'barcode': barcode,
                        'name': name
                    })
                else:
                    skipped += 1
            else:
                skipped += 1
        
        print(f"тЬЕ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Др╕Фр╣Й: {len(products)} р╕гр╕▓р╕вр╕Бр╕▓р╕г")
        print(f"тЪая╕П р╕Вр╣Йр╕▓р╕б: {skipped} р╕гр╕▓р╕вр╕Бр╕▓р╕г")
        
        # р╣Бр╕кр╕Фр╕Зр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З 5 р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Бр╕гр╕Б
        print("ЁЯФН р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е 5 р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Бр╕гр╕Б:")
        for i, product in enumerate(products[:5]):
            print(f"   {i+1}. Barcode: '{product['barcode']}' | Name: '{product['name'][:50]}...'")
        
        return products
        
    except Exception as e:
        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕нр╣Ир╕▓р╕Щ Google Sheets: {e}")
        import traceback
        traceback.print_exc()
        return []

def import_to_supabase(products_data):
    """р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕З Supabase"""
    if not products_data:
        print("тЭМ р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╣Йр╕Щр╕│р╣Ар╕Вр╣Йр╕▓")
        return False
    
    print(f"ЁЯТ╛ р╣Ар╕гр╕┤р╣Ир╕бр╕Щр╕│р╣Ар╕Вр╣Йр╕▓ {len(products_data)} р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕ер╕З Supabase...")
    
    client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    
    # р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Чр╕╡р╕ер╕░ batch р╣Ар╕ер╣Зр╕Б р╣Ж
    batch_size = 20  # р╕ер╕Фр╕Вр╕Щр╕▓р╕Ф batch р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ error
    total_inserted = 0
    errors = 0
    
    try:
        for i in range(0, len(products_data), batch_size):
            batch = products_data[i:i + batch_size]
            batch_num = i // batch_size + 1
            
            print(f"ЁЯУд Batch {batch_num}/{(len(products_data) + batch_size - 1) // batch_size}: {len(batch)} р╕гр╕▓р╕вр╕Бр╕▓р╕г...")
            
            # р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ъ batch р╕Щр╕╡р╣Й
            products_to_insert = []
            for product in batch:
                product_record = {
                    'sku': product['barcode'],  # р╣Гр╕Кр╣Йр╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Фр╣Ар╕Ыр╣Зр╕Щ SKU
                    'barcode': product['barcode'], 
                    'name': product['name'],
                    'description': f"р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Ир╕▓р╕Б Google Sheets - {product['name'][:50]}",
                    'category': 'р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Чр╕▒р╣Ир╕зр╣Др╕Ы',
                    'brand': 'р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕',
                    'unit': 'р╕Кр╕┤р╣Йр╕Щ',
                    'cost_price': 0.00,
                    'selling_price': 0.00,
                    'reorder_level': 10,
                    'max_stock_level': 100,
                    'is_active': True
                }
                products_to_insert.append(product_record)
            
            # р╕ер╕нр╕Зр╕Щр╕│р╣Ар╕Вр╣Йр╕▓ batch
            try:
                result = client.table('products').insert(products_to_insert).execute()
                if result.data:
                    total_inserted += len(result.data)
                    print(f"тЬЕ р╕кр╕│р╣Ар╕гр╣Зр╕И {len(result.data)} р╕гр╕▓р╕вр╕Бр╕▓р╕г")
                else:
                    print("тЪая╕П р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕ер╕▒р╕Ър╕бр╕▓")
            except Exception as batch_error:
                print(f"тЭМ Error р╣Гр╕Щ batch {batch_num}: {str(batch_error)[:100]}...")
                errors += len(batch)
                # р╕ер╕нр╕Зр╕Чр╕╡р╕ер╕░р╕гр╕▓р╕вр╕Бр╕▓р╕г
                for product_data in products_to_insert:
                    try:
                        single_result = client.table('products').insert([product_data]).execute()
                        if single_result.data:
                            total_inserted += 1
                            errors -= 1
                    except Exception as single_error:
                        # р╕Вр╣Йр╕▓р╕б error р╣Ар╕Зр╕╡р╕вр╕Ъ р╣Ж р╣Ар╕Юр╕╖р╣Ир╕нр╣Др╕бр╣Ир╣Гр╕лр╣Й log р╣Ар╕вр╕нр╕░р╣Ар╕Бр╕┤р╕Щр╣Др╕Ы
                        pass
            
            # р╣Бр╕кр╕Фр╕Зр╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓
            if batch_num % 10 == 0 or batch_num == (len(products_data) + batch_size - 1) // batch_size:
                progress = (batch_num * batch_size) / len(products_data) * 100
                print(f"ЁЯУК р╕Др╕зр╕▓р╕бр╕Др╕╖р╕Ър╕лр╕Щр╣Йр╕▓: {progress:.1f}% ({total_inserted} р╕гр╕▓р╕вр╕Бр╕▓р╕г)")
        
        print(f"ЁЯОЙ р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ! р╕кр╕│р╣Ар╕гр╣Зр╕И {total_inserted} р╕гр╕▓р╕вр╕Бр╕▓р╕г, Error {errors} р╕гр╕▓р╕вр╕Бр╕▓р╕г")
        return total_inserted > 0
        
    except Exception as e:
        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Щр╕│р╣Ар╕Вр╣Йр╕▓: {e}")
        return False

def show_sample_barcodes():
    """р╣Бр╕кр╕Фр╕Зр╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Фр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ъ"""
    print("ЁЯзк р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Фр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Чр╕Фр╕кр╕нр╕Ър╣Др╕Фр╣Й:")
    
    client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    
    try:
        products = client.table('products').select('sku, barcode, name').limit(10).execute()
        
        if products.data:
            print("ЁЯУ▒ р╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Фр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ъ:")
            for i, product in enumerate(products.data, 1):
                print(f"   {i}. '{product['barcode']}' тЖТ {product['name'][:50]}...")
        else:
            print("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕┤р╕Щр╕Др╣Йр╕▓р╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е")
            
    except Exception as e:
        print(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕Фр╕кр╕нр╕Ър╣Др╕Фр╣Й: {e}")

def main():
    print("ЁЯФД р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Google Sheets (р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в)")
    print("ЁЯУЛ р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е:")
    print("   Column A = р╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Ф (Barcode) тЖР р╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Др╣Йр╕Щр╕лр╕▓")
    print("   Column B = р╕Кр╕╖р╣Ир╕нр╕кр╕┤р╕Щр╕Др╣Йр╕▓ (Product Name)")
    print("")
    
    # Step 1: Get data from Google Sheets  
    products_data = get_products_from_sheets()
    if not products_data:
        return False
    
    # Step 2: Import to Supabase
    success = import_to_supabase(products_data)
    
    if success:
        print("\nЁЯОЙ р╕Бр╕▓р╕гр╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!")
        show_sample_barcodes()
        print("\nЁЯУ▒ р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Чр╕Фр╕кр╕нр╕Ър╕Чр╕╡р╣И www.ptee88.com р╣Др╕Фр╣Йр╣Бр╕ер╣Йр╕з")
        print("ЁЯФН р╣Гр╕Кр╣Йр╕Ър╕▓р╕гр╣Мр╣Вр╕Др╣Йр╕Фр╕Ир╕гр╕┤р╕Зр╕Ир╕▓р╕Б Google Sheets р╕Вр╕нр╕Зр╕Др╕╕р╕У")
    else:
        print("\nтЭМ р╕Бр╕▓р╕гр╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з")
    
    return success

if __name__ == "__main__":
    main()