#!/usr/bin/env python3
"""
‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Google Sheets ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
Column A = Barcode (‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)
Column B = Product Name (‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
"""

import os
from supabase import create_client
from sheets_manager import create_sheets_manager

# Configuration
SUPABASE_URL = "https://khiooiigrfrluvyobljq.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoaW9vaWlncmZybHV2eW9ibGpxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxMjAxNDYsImV4cCI6MjA2ODY5NjE0Nn0.M9mwVk8WnEQfb2l7-NOdnrmJqSThYf2TqJK1ahnsx-Q"
PRODUCT_SHEET_ID = "17fQBTqiUG6tFH-67its-iaKDV2ef4HLJ9S3BGKTVSdM"

def get_products_from_sheets():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets Column A (Barcode), B (Product Name)"""
    print("üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets...")
    
    sheets_manager = create_sheets_manager()
    if not sheets_manager:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ")
        return []
    
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Column A (Barcode), B (Product Name)
        result = sheets_manager.sheets_service.spreadsheets().values().get(
            spreadsheetId=PRODUCT_SHEET_ID,
            range='A:B'
        ).execute()
        
        values = result.get('values', [])
        
        if not values:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets")
            return []
        
        print(f"üìã ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(values)} ‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô Google Sheets")
        
        products = []
        for i, row in enumerate(values):
            if i == 0:  # Skip header row
                continue
                
            if len(row) >= 2:
                barcode = row[0].strip() if row[0] else ''
                name = row[1].strip() if row[1] else ''
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                if barcode and name:
                    products.append({
                        'barcode': barcode,
                        'name': name
                    })
        
        print(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
        print("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å:")
        for i, product in enumerate(products[:10]):
            print(f"   {i+1}. Barcode: '{product['barcode']}' | Name: '{product['name'][:50]}...'")
        
        return products
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô Google Sheets: {e}")
        import traceback
        traceback.print_exc()
        return []

def import_to_supabase(products_data):
    """‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Supabase"""
    if not products_data:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤")
        return False
    
    print(f"üíæ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ {len(products_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á Supabase...")
    
    client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Supabase
    products_to_insert = []
    for product in products_data:
        product_record = {
            'sku': product['barcode'],  # ‡πÉ‡∏ä‡πâ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏õ‡πá‡∏ô SKU
            'barcode': product['barcode'], 
            'name': product['name'],
            'description': f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Google Sheets - {product['name'][:50]}",
            'category': '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
            'brand': '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
            'unit': '‡∏ä‡∏¥‡πâ‡∏ô',
            'cost_price': 0.00,
            'selling_price': 0.00,
            'reorder_level': 10,
            'max_stock_level': 100,
            'is_active': True
        }
        products_to_insert.append(product_record)
    
    # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡∏•‡∏∞ batch
    batch_size = 100
    total_inserted = 0
    
    try:
        for i in range(0, len(products_to_insert), batch_size):
            batch = products_to_insert[i:i + batch_size]
            batch_num = i // batch_size + 1
            
            print(f"üì§ Batch {batch_num}: {len(batch)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")
            
            try:
                result = client.table('products').insert(batch).execute()
                if result.data:
                    total_inserted += len(result.data)
                    print(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(result.data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            except Exception as batch_error:
                print(f"‚ùå Error ‡πÉ‡∏ô batch {batch_num}: {batch_error}")
                # ‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                for product in batch:
                    try:
                        single_result = client.table('products').insert([product]).execute()
                        if single_result.data:
                            total_inserted += 1
                    except Exception as single_error:
                        print(f"‚ö†Ô∏è Skip: {product['barcode']} - {single_error}")
        
        print(f"üéâ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_inserted} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£!")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤: {e}")
        return False

def show_sample_barcodes():
    """‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("üß™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ:")
    
    client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    
    try:
        products = client.table('products').select('sku, barcode, name').limit(10).execute()
        
        print("üì± ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        for i, product in enumerate(products.data, 1):
            print(f"   {i}. '{product['barcode']}' ‚Üí {product['name'][:50]}...")
            
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: {e}")

def main():
    print("üîÑ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Google Sheets")
    print("üìã ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà:")
    print("   Column A = ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î (Barcode) ‚Üê ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    print("   Column B = ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Product Name)")
    print("")
    
    # Step 1: Get data from Google Sheets  
    products_data = get_products_from_sheets()
    if not products_data:
        return False
    
    # Step 2: Import to Supabase
    success = import_to_supabase(products_data)
    
    if success:
        print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        show_sample_barcodes()
        print("\nüì± ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà www.ptee88.com ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß")
        print("üîç ‡πÉ‡∏ä‡πâ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Google Sheets ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    else:
        print("\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    return success

if __name__ == "__main__":
    main()